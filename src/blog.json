[

  {
    "title":"How to find the Python Installation Path on Windows",
    "metades":"Discover how to locate the Python installation path on your Windows system using two effective methods: the traditional Command Prompt and the modern Terminal. Whether you're troubleshooting or setting up environment variables, this guide provides clear, step-by-step instructions with visuals to help you find the information you need. Explore now!",
    "content":"<p>
            Locating the installation path of Python on your Windows system is essential for various tasks such as setting up environment variables or troubleshooting issues. In this guide, I will show you two methods to help you find the Python installation path, first using the Command Prompt (cmd) and the newer terminal.
          </p>
          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Method 0: Using Command Prompt (CMD)</h2>
          <p>This classic method involves utilizing Windows' Command Prompt to find where Python is installed.</p>
          <h2 class='prose text-xl my-2 sm:text-xl lg:text-2xl'>Step 1: Open Command Prompt</h2>
          <p>Press Win + R to open run window, type cmd, and press Enter.</p>
          <p>In the Command Prompt window, type the following command:</p>

          <pre><code class='prose language-powershell'>where python</code></pre>
          <p>Press Enter, and the system will display the paths where Python is installed.</p>
          <pre><code class='prose language-powershell'>PS C:\Users\Abhi> where python

C:\Users\Abhi\scoop\apps\python\current\python.exe
C:\Users\Abhi\AppData\Local\Microsoft\WindowsApps\python.exe</code></pre>

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Method 1: Using Terminal</h2>
          <p>
            The terminal is a powerful scripting environment and newer command-line shell, offering a more modern approach to interacting with your system. If you use the terminal, the following steps will help you find where Python is installed!
          </p>
          <p>Follow the steps below:</p>

          <h2 class='prose text-xl my-2 sm:text-xl lg:text-2xl'>Step 1: Open Terminal</h2>
          <p>You can open Terminal by searching for it in the Start menu and selecting "Terminal"</p>
          <h2 class='prose text-xl my-2 sm:text-xl lg:text-2xl'>Step 2: Use the Get-Command Command</h2>
          <p>In the Terminal window, type the following command:</p>
          <pre><code class='prose language-powershell'>(Get-Command python).Path</code></pre>
          <p>Press Enter, and Terminal will reveal the paths where Python is installed.</p>
          <pre><code class='prose language-powershell'>PS C:\Users\Abhi> (Get-Command python).Path

C:\Users\Abhi\scoop\apps\python\current\python.exe</code></pre>

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Conclusion</h2>
          <p>
            Both the Command Prompt and Terminal methods are effective ways to find the Python installation path on your Windows system. While the Command Prompt is more traditional, Terminal offers a modern and powerful alternative.
          </p>
          <p>
            Whether you're troubleshooting an issue, setting up an environment variable, or simply curious about your Python installation, these methods provide you with the information you need. Happy Coding!
          </p>
",
    "readingTime":"2 Minutes"
  },
  {
    "title":"How to Point Domain and host a Next.js app in Production on an Ubuntu VPS",
    "metades":"Learn how to deploy a Next.js application in a production environment on an Ubuntu VPS with this comprehensive guide. Follow step-by-step instructions to set up NGINX, PM2, and configure your Next.js app for seamless hosting.",
    "content":"<p>
            In this guide, we&apos;ll walk through the process of hosting a Next.js app in
            production using NGINX and PM2. Follow these steps to get your Next.js app
            up and running smoothly.
          </p>
 <iframe class='prose hidden md:block mt-2' width="940" height="540" src="https://www.youtube.com/embed/LOAwc5XDxzg?si=80q4cLKAtoeuh56S" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen></iframe>
          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 0: Get Access to Remote Server</h2>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>ssh -p PORT USERNAME@HOSTIP</code></pre>
          <p>Example:</p>
          <pre><code class='prose language-bash'>ssh -p 22 abhi@203.32.44.92
ssh root@194.87.34.23</code></pre>

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 1: Installing Necessary Packages</h2>
          <p>
            First, let&apos;s ensure our server has the required packages installed. Open a
            terminal and run the following commands:
          </p>

          <div class='prose relative'>
            <pre><code class='prose language-bash'>sudo apt update && sudo apt upgrade
sudo apt install nginx
sudo apt install git
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
source ~/.bashrc
nvm install --lts
sudo npm install -g pm2@latest</code></pre>
           
          </div>
          <p>Verify that all required softwares are installed:</p>
          <pre><code class='prose language-bash'>nginx -v
node -v
npm -v
git --version
pm2 --version</code></pre>
          <p>Add PM2 Process on Startup:</p>
          <pre><code class='prose language-bash'>sudo pm2 startup</code></pre>
          <p>Verify Nginx is Active and Running:</p>
          <pre><code class='prose language-bash'>sudo service nginx status</code></pre>
         
          <p>Verify Web Server Ports are Open and Allowed through Firewall:</p>
          <pre><code class='prose language-bash'>sudo ufw status verbose</code></pre>
          <p>If UFW Firewall is not enable you can enable it:</p>
          <pre><code class='prose language-bash'>sudo ufw enable
sudo ufw allow http
sudo ufw allow https
sudo ufw allow ssh</code></pre>
          <p>Exit from Remote Server:</p>
          <pre><code class='prose language-bash'>exit</code></pre>

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 2: Pointing Domain to Remote Server</h2>
          <p>Login to Your Domain Provider Website, Navigate to Manage DNS & Add Following Records:</p>
          <pre><code class='prose language-bash'>--------------------------------------------
Type    Host/Name    Value
-----------------------------------------------
A       @           Your Remote Server IP
A       www         Your Remote Server IP
AAAA    @           Your Remote Server IPv6
AAAA    www         Your Remote Server IPv6</code></pre>
          

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 3: Copy Project from Local Machine to Remote Server or VPS </h2>
          <p>There are two ways to do it:</p>

          <h4 class='prose text-md my-2 sm:text-xl lg:text-2xl'>I. Using Command Prompt</h4>
          <p>- On Local Windows Machine Make Your Project Folder a Zip File using any of the software e.g. winzip</p>
          <p>- Open Command Prompt</p>
          <p>- Copy Zip File from Local Windows Machine to Linux Remote Server</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>scp -P Remote_Server_Port Source_File_Path Destination_Path</code></pre>
          <p>Example:</p>
          <pre><code class='prose language-bash'>scp -P 1034 codebhaiya.zip abhi@203.32.44.92</code></pre>
      
          <p>- Copied Successfully</p>
          <p>- Get Access to Remote Server via SSH</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>ssh -p PORT USERNAME@HOSTIP</code></pre>
          <p>Example:</p>
          <pre><code class='prose language-bash'>ssh -p 1034 abhi@203.32.44.92
ssh root@194.87.34.23</code></pre>
         
          <p>- Unzip the Copied Project Zip File</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>unzip zip_file_name</code></pre>
         
          <p>Example:</p>
          <pre><code class='prose language-bash'>unzip codebhaiya.zip</code></pre>
         

          <h4 class='prose text-md my-2 sm:text-xl lg:text-2xl'>II. Using Github</h4>
          <p>- Open Project on VS Code then add .gitignore file (If needed)</p>
          <p>- Push your Poject to Your Github Account as Private Repo</p>
          <p>- Make Connection between Remote Server and Github Repo via SSH Key</p>
          <p>- Generate SSH Keys</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>ssh-keygen -t ed25519 -C "your_email@example.com"</code></pre>
          <p>If Permission Denied then Own .ssh then try again to Generate SSH Keys</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>sudo chown -R user_name .ssh</code></pre>
          <p>Example:</p>
          <pre><code class='prose language-bash'>sudo chown -R abhi .ssh</code></pre>
          <p>Open Public SSH Keys then copy the key</p>
          <pre><code class='prose language-bash'>cat ~/.ssh/id_ed25519.pub</code></pre>

          <p>- Go to Your Github Repo</p>
          <p>- Click on Settings Tab</p>
          <p>- Click on Deploy Keys option from sidebar</p>
          <p>- Click on Add Deploy Key Button and Paste Remote Server&apos;s Copied SSH Public Key then Click on Add Key</p>
          <p>- Clone Project from your github Repo using SSH Path It requires to setup SSH Key on Github</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>git clone ssh_repo_path</code></pre>
          <p>Example:</p>
          <pre><code class='prose language-bash'>git clone git@github.com:abhinayjangde/codebhaiya.git</code></pre>
          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 4: Configuring NGINX</h2>
          <p>Create Virtual Host File</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>sudo nano /etc/nginx/sites-available/your_domain</code></pre>
          <p>Example:</p>
          <pre><code class='prose language-bash'>sudo nano /etc/nginx/sites-available/codebhaiya.com</code></pre>
          <p>Write following Code in Virtual Host File</p>



          <div class='prose relative'>
          <pre><code class='prose language-bash'>server{
    listen 80;
    listen [::]:80;
    server_name your_domain www.your_domain;
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}</code></pre>
            

          </div>

          <p>Enable Virtual Host or Create Symbolic Link of Virtual Host File</p>
          <p>Syntax:</p>
          <pre><code class='prose language-bash'>sudo ln -s /etc/nginx/sites-available/virtual_host_file /etc/nginx/sites-enabled/virtual_host_file</code></pre>
        
          <p>Example:</p>
          <pre><code class='prose language-bash'>sudo ln -s /etc/nginx/sites-available/codebhaiya.com /etc/nginx/sites-enabled/codebhaiya.com</code></pre>
        
          <p>Check Configuration is Correct or Not</p>
          <pre><code class='prose language-bash'>sudo nginx -t</code></pre>
          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 5: Setting Up Next.js App</h2>
          <p>Now, let&apos;s prepare our Next.js app. Navigate to your project directory and execute the following commands:</p>
          <pre><code class='prose language-bash'>cd ~/project_folder_name</code></pre>
         
          <p>Install Dependencies</p>
          <pre><code class='prose language-bash'>npm install
npm run build</code></pre>

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 6: Configuring PM2</h2>
          <p>Create pm2 config File inside project folder</p>
          <pre><code class='prose language-bash'>nano ecosystem.config.js</code></pre>
         
          <p>Write below code in ecosystem.config.js file</p>
          <pre><code class='prose language-bash'>module.exports = {
    apps : [
        {
            name: "myapp",
            script: "npm start",
            port: 3000
        }
    ]
}</code></pre>
          

          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 7: Finally</h2>
          <p>Restart Nginx</p>
          <pre><code class='prose language-bash'>sudo service nginx restart</code></pre>
          
          <p>Start NextJS Application using pm2</p>
          <pre><code class='prose language-bash'>pm2 start ecosystem.config.js</code></pre>
        
          <p>Save PM2 Process</p>
          <pre><code class='prose language-bash'>pm2 save</code></pre>
       
          <p>Check PM2 Status</p>
          <pre><code class='prose language-bash'>pm2 status</code></pre>
    
          <p>Now you can make some changes in your project local development VS Code and Pull it on Remote Server (Only if you have used Github)</p>
          <p>Pull the changes from github repo</p>
          <pre><code class='prose language-bash'>git pull
npm run build
pm2 reload app_name/id</code></pre>
          

          <h1 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Using Certbot for HTTPS</h1>
          <p>Securing your Next.js application with HTTPS is crucial for protecting sensitive data and ensuring user trust. Certbot is a widely used tool for obtaining and managing SSL/TLS certificates from the Let&apos;s Encrypt Certificate Authority. Follow these steps to set up HTTPS for your Next.js app using Certbot:</p>

          <h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 1: Install Certbot</h3>
          <pre><code class='prose language-bash'>sudo apt update
sudo apt install python3-certbot-nginx</code></pre>
   

          <h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 2: Obtain SSL Certificate</h3>
          <p>Follow the prompts to provide an email address for renewal reminders and agree to the terms of service. Certbot will handle the certificate issuance and configuration for NGINX.</p>
          <pre><code class='prose language-bash'>sudo certbot --nginx -d codebhaiya.com</code></pre>
        
          <h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 3: Verify HTTPS Configuration</h3>
          <pre><code class='prose language-bash'>sudo nginx -t</code></pre>
         
          <p>If the test is successful, reload NGINX to apply the changes:</p>
          <pre><code class='prose language-bash'>sudo systemctl reload nginx</code></pre>

          <h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 4: Automate Certificate Renewal</h3>
          <p>This command ensures that Certbot will renew your certificates automatically when they are about to expire.</p>
          <pre><code class='prose language-bash'>sudo systemctl enable certbot.timer</code></pre>
          
          <h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 5: Verify Renewal</h3>
          <p>If the dry run completes without errors, you&apos;re all set. Certbot will handle certificate renewal automatically when necessary.</p>
          <pre><code class='prose language-bash'>sudo certbot renew --dry-run</code></pre>
          <h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 6: Test HTTPS Connection</h3>
          <p>Finally, test your Next.js application over HTTPS to ensure that everything is working correctly. You can do this by navigating to your domain in a web browser and verifying that the connection is secure.

            By following these steps, you can secure your Next.js application with HTTPS using Certbot, enhancing security and trust for your users.</p>
          <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Conclusion</h2>
          <p>
            Your Next.js app is now ready and running in production! NGINX is serving
            as a reverse proxy, forwarding requests to your Next.js server, and PM2 is
            ensuring your app stays up and running.
          </p>
          <p>
            By following these steps and configurations, you can successfully deploy
            and host your Next.js application in a production environment. Happy
            coding!
          </p>",
    "readingTime":"3 Minutes"
  },
  {
    "title":"How to Point Domain and host PHP application using Nginx in Production on an Ubuntu VPS",
    "metades":"In this guide, we'll walk through the process of hosting a PHP app in production using NGINX. Follow these steps to get your PHP app up and running smoothly.",
    "content":"<p>
    In this guide, we&apos;ll walk through the process of hosting a PHP app in
    production using NGINX. Follow these steps to get your PHP app
    up and running smoothly.
</p>
<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 0: Get Access to Remote Server</h2>
<p>Syntax:</p>
<pre><code class='prose language-bash'>ssh -p PORT USERNAME@HOSTIP</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>ssh -p 1034 abhi@203.32.44.92
ssh root@194.87.34.23</code></pre>

<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 1: Installing Necessary Packages</h2>
<p>
    First, let&apos;s ensure our server has the required packages installed. Open a
    terminal and run the following commands:
</p>

<div class='prose'>
    <pre><code class='prose language-bash'>sudo apt update && sudo apt upgrade
sudo apt install nginx
sudo apt install git
sudo apt install php-fpm php-mysql
sudo apt install mysql-server</code></pre>

</div>
<p>Verify that all required softwares are installed:</p>
<pre><code class='prose language-bash'>nginx -v
node -v
npm -v
git --version</code></pre>
<p>Verify Nginx is Active and Running:</p>
<pre><code class='prose language-bash'>sudo service nginx status</code></pre>

<p>Verify Web Server Ports are Open and Allowed through Firewall:</p>
<pre><code class='prose language-bash'>sudo ufw status verbose</code></pre>
<p>If UFW Firewall is not enable you can enable it:</p>
<pre><code class='prose language-bash'>sudo ufw enable
sudo ufw allow http
sudo ufw allow https
sudo ufw allow ssh</code></pre>
<p>Exit from Remote Server:</p>
<pre><code class='prose language-bash'>exit</code></pre>

<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 2: Pointing Domain to Remote Server</h2>
<p>Login to Your Domain Provider Website, Navigate to Manage DNS & Add Following Records:</p>
<pre><code class='prose language-bash'>--------------------------------------------
Type    Host/Name    Value
-----------------------------------------------
A       @           Your Remote Server IP
A       www         Your Remote Server IP
AAAA    @           Your Remote Server IPv6
AAAA    www         Your Remote Server IPv6</code></pre>


<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 3: Copy Project from Local Machine to Remote Server or VPS </h2>
<p>There are two ways to do it:</p>

<h4 class='prose text-md my-2 sm:text-xl lg:text-2xl'>I. Using Command Prompt</h4>
<p>- On Local Windows Machine Make Your Project Folder a Zip File using any of the software e.g. winzip</p>
<p>- Open Command Prompt</p>
<p>- Copy Zip File from Local Windows Machine to Linux Remote Server</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>scp -P Remote_Server_Port Source_File_Path Destination_Path</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>scp -P 1034 codebhaiya.zip abhi@203.32.44.92</code></pre>

<p>- Copied Successfully</p>
<p>- Get Access to Remote Server via SSH</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>ssh -p PORT USERNAME@HOSTIP</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>ssh -p 1034 abhi@203.32.44.92
ssh root@194.87.34.23</code></pre>

<p>- Unzip the Copied Project Zip File</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>unzip zip_file_name</code></pre>

<p>Example:</p>
<pre><code class='prose language-bash'>unzip codebhaiya.zip</code></pre>


<h4 class='prose text-md my-2 sm:text-xl lg:text-2xl'>II. Using Github</h4>
<p>- Open Project on VS Code then add .gitignore file (If needed)</p>
<p>- Push your Poject to Your Github Account as Private Repo</p>
<p>- Make Connection between Remote Server and Github Repo via SSH Key</p>
<p>- Generate SSH Keys</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>ssh-keygen -t ed25519 -C "your_email@example.com"</code></pre>
<p>If Permission Denied then Own .ssh then try again to Generate SSH Keys</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>sudo chown -R user_name .ssh</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>sudo chown -R abhi .ssh</code></pre>
<p>Open Public SSH Keys then copy the key</p>
<pre><code class='prose language-bash'>cat ~/.ssh/id_ed25519.pub</code></pre>

<p>- Go to Your Github Repo</p>
<p>- Click on Settings Tab</p>
<p>- Click on Deploy Keys option from sidebar</p>
<p>- Click on Add Deploy Key Button and Paste Remote Server&apos;s Copied SSH Public Key then Click on Add Key</p>
<p>- Clone Project from your github Repo using SSH Path It requires to setup SSH Key on Github</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>git clone ssh_repo_path</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>git clone git@github.com:abhinayjangde/codebhaiya.git</code></pre>
<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 4: Configuring NGINX</h2>
<p>Move project folder to Web Server public directory</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>sudo mv project_folder_name /var/www</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>sudo mv codebhaiya /var/www</code></pre>

<p>Create Virtual Host File</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>sudo nano /etc/nginx/sites-available/your_domain</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>sudo nano /etc/nginx/sites-available/codebhaiya.com</code></pre>
<p>Write following Code in Virtual Host File</p>



<div class='prose'>
    <pre><code class='prose language-bash'>server{
listen 80;
listen [::]:80;
server_name your_domain www.your_domain;
root /var/www/project_folder_name;
index index.php;
location / {
try_files $uri $uri/ =404;
}
location ~ \.php$ {
fastcgi_pass unix:/run/php/php8.1-fpm.sock;
include fastcgi_params;
fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
}

}</code></pre>

</div>

<p>Enable Virtual Host or Create Symbolic Link of Virtual Host File</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>sudo ln -s /etc/nginx/sites-available/virtual_host_file /etc/nginx/sites-enabled/virtual_host_file</code></pre>

<p>Example:</p>
<pre><code class='prose language-bash'>sudo ln -s /etc/nginx/sites-available/codebhaiya.com /etc/nginx/sites-enabled/codebhaiya.com</code></pre>

<p>Check Configuration is Correct or Not</p>
<pre><code class='prose language-bash'>sudo nginx -t</code></pre>
<p>Restart nginx</p>
<pre><code class='prose language-bash'>sudo service nginx restart</code></pre>
<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 5: Setting Up PHP App</h2>

<p>Create phpmyadmin Symlink:</p>
<pre><code class='prose language-bash'>sudo ln -s /usr/share/phpmyadmin /var/www/project_folder_name/phpmyadmin</code></pre>

<p>Login into mysql</p>
<p>Create Database User</p>
<p>Create Database</p>
<p>Import Database (If required)</p>
<p>Write Database Credentials in Project's Database Configuration File e.g. dbConnection.php</p>
<p>Restart Nginx</p>
<pre><code class='prose language-bash'>suod service nignx restart</code></pre>


<p>Now you can make some changes in your project local development VS Code and Pull it on Remote Server (Only if you have used Github)</p>
<p>Go to your project directory</p>
<p>Syntax:</p>
<pre><code class='prose language-bash'>cd /var/www/project_folder_name</code></pre>
<p>Example:</p>
<pre><code class='prose language-bash'>cd /var/www/codebhaiya</code></pre>

<p>Pull the changes from github repo</p>
<pre><code class='prose language-bash'>git pull</code></pre>



<h1 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Using Certbot for HTTPS</h1>
<p>Securing your PHP application with HTTPS is crucial for protecting sensitive data and ensuring user trust. Certbot is a widely used tool for obtaining and managing SSL/TLS certificates from the Let&apos;s Encrypt Certificate Authority. Follow these steps to set up HTTPS for your PHP app using Certbot:</p>

<h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 1: Install Certbot</h3>
<pre><code class='prose language-bash'>sudo apt update
sudo apt install certbot python3-certbot-nginx</code></pre>


<h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 2: Obtain SSL Certificate</h3>
<p>Follow the prompts to provide an email address for renewal reminders and agree to the terms of service. Certbot will handle the certificate issuance and configuration for NGINX.</p>
<pre><code class='prose language-bash'>sudo certbot --nginx -d codebhaiya.com</code></pre>

<h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 3: Verify HTTPS Configuration</h3>
<pre><code class='prose language-bash'>sudo nginx -t</code></pre>

<p>If the test is successful, reload NGINX to apply the changes:</p>
<pre><code class='prose language-bash'>sudo systemctl reload nginx</code></pre>

<h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 4: Automate Certificate Renewal</h3>
<p>This command ensures that Certbot will renew your certificates automatically when they are about to expire.</p>
<pre><code class='prose language-bash'>sudo systemctl enable certbot.timer</code></pre>

<h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 5: Verify Renewal</h3>
<p>If the dry run completes without errors, you&apos;re all set. Certbot will handle certificate renewal automatically when necessary.</p>
<pre><code class='prose language-bash'>sudo certbot renew --dry-run</code></pre>
<h3 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 6: Test HTTPS Connection</h3>
<p>Finally, test your PHP application over HTTPS to ensure that everything is working correctly. You can do this by navigating to your domain in a web browser and verifying that the connection is secure.

    By following these steps, you can secure your PHP application with HTTPS using Certbot, enhancing security and trust for your users.</p>
<h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Conclusion</h2>
<p>
    Your PHP app is now ready and running in production! NGINX is serving
    as a reverse proxy, forwarding requests to your PHP server.
</p>
<p>
    By following these steps and configurations, you can successfully deploy
    and host your PHP application in a production environment. Happy
    coding!
</p>
",
    "readingTime":"3 Minutes"
  },
  {
    "title":"How to Reset the free trial period of StartAllBack",
    "metades":"In this guide, we'll walk through the process of resetting the trial period of StartAllBack software, You can enjoy the all feature of this software free of cost with officials exe.",
    "content":"<p>
    In this guide, we&apos;ll walk through the process of resetting the trial period of StartAllBack software, You can enjoy the all feature of this software free of cost with officials exe. Follow these steps to reset trial period of 90 day of your StartAllBack application up and running smoothly.
  </p>

  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 0: What is StartAllBack ?</h2>
  <p>StartAllBack is a customization software designed to enhance the Windows user experience by restoring and improving the classic Start menu and taskbar features, especially for Windows 11 users. It is particularly popular among users who prefer the traditional look and feel of Windows interfaces and want to have more control over their desktop environment.</p>
<iframe class='prose hidden md:block mt-2' width="940" height="540" src="https://www.youtube.com/embed/0iEFw9qX81k?si=ebvZr91y6ZuWQNL0" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen></iframe>
  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 1: Download StartAllBack & Install</h2>
  <p>Download the StartAllBack software from its official website.</p>
  <pre><code class='prose language-bash'>https://startallback.com</code></pre>
  <span>Click here to go to download link:</span>
  <Link href={"https://startallback.com/"} target='_blank' class='prose mx-2 text-blue-700'>StartAllBack</Link>

  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 2: What is Proccess Monitor ?</h2>
  <p>Process Monitor is a powerful and advanced monitoring tool for Windows, provided by Microsoft. It combines the features of two legacy utilities, Filemon and Regmon, to offer comprehensive real-time monitoring of file system, registry, process, and thread activity.</p>

  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 3: Proccess Monitor & Install</h2>
  <pre><code class='prose language-bash'>https://learn.microsoft.com/en-us/sysinternals/downloads/procmon</code></pre>
  <span>Click here to go to download link:</span>
  <Link href={"https://learn.microsoft.com/en-us/sysinternals/downloads/procmon"} target='_blank' class='prose mx-2 text-blue-700'>ProccessMonitor</Link>
  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 4: Reset Trial Days</h2>
  <p>Make sure to successfully installed the Proccess Monitor package.</p>
  <p>1. Run the Procmon.exe</p>
  <p>2. If pop-up opens click YES</p>
  <p>3. If Proccess Monitor Filter is not open automatically. Click the Filter icon</p>
  <p>4. Fill all the filed same as filled in below image.</p>
  <Image src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fstartallback.e13d190f.png&w=1080&q=75" loading="lazy" decoding="async" data-nimg={1} width={942} height={581} alt='startallback' class='prose border rounded-lg my-2' />
  <p>5. Now click on Add and then click Apply</p>
  <p>6. Now click Ok</p>
  <p>7. Now right click on Taskbar then go to Properties</p>
  <p>8. StartAllBack Configuration window opens</p>
  <Image src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen.1f03b608.png&w=1080&q=75" width={942} height={581} loading="lazy" data-nimg={1} decoding="async" alt='open window' class='prose border rounded-lg my-2' />
  <p>9. Click on About. You can see trial day left here.</p>
  <p>10. Now got to Proccess Monitor, select and of top 2-3 keys and right click on it</p>
  <p>11. And then click Copy 'HKCU\Software\Microsoft\Windows\CurrentVersion\Eplorer...'</p>
  <Image src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcopy.76f09c2d.png&w=1080&q=75" width={942} height={581} loading="lazy" data-nimg={1} decoding="async" alt='copy code' class='prose border rounded-lg my-2' />
  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 5: Final Step</h2>
  <p>Now, open your powershell terminal or cmd And use these command to reset trail days.</p>
  <p>Syntax:</p>
  <pre><code class='prose language-bash'>reg delete [Past Copied Content Here] /f</code></pre>
  <p>Example:</p>
  <pre><code class='prose language-bash'>reg delete "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\CLSID\{6559c6bc-11e8-bb01-68cf-b5920fae745}" /f</code></pre>


  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Conclusion</h2>
  <p>
    Now you have successfully reset free trail period of StartAllBack application.
  </p>
  <p>
    By following these steps and configurations, you can successfully reset and use your application in a window. Happy Decoding!
  </p>
",
    "readingTime":"2 Minutes"
  },
  {
    "title":"How to Copy File from Windows to Linux Remote Server (VPS)",
    "metades":"In this guide, we&apos;ll walk through the process of transferring files from a Windows system to a Linux remote server, such as a VPS, Digital Ocean Droplet, or an EC2 instance, can seem challenging if you&apos;re not familiar with the process.",
    "content":"<p>
    In this guide, we&apos;ll walk through the process of transferring files from a Windows system to a Linux remote server, such as a VPS, Digital Ocean Droplet, or an EC2 instance, can seem challenging if you&apos;re not familiar with the process. In this guide, we&apos;ll walk you through several methods to easily and securely copy files between these platforms, using tools like SCP, SFTP, and others. Whether you&apos;re a beginner or an experienced user, you&apos;ll find clear, step-by-step instructions to ensure a smooth transfer. Let&apos;s dive in and simplify your file transfer tasks!
  </p>
  <p class='prose bg-yellow-200 dark:bg-slate-200 px-2 my-2'><span>Note:- </span>You can Copy Complete Project Folder by making it a Zip File then Unzip it on Server.</p>
  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 0: Make Zip of Your Project</h2>
  <p>1. On local windows machine make your project folder a Zip file using any of the software e.g. winzip</p>
  <p>2. Open Command Prompt</p>
  <p>3. Copy Zip file from Local Windows Machine to Linux Remote Server</p>
  <p>Syntax:</p>
  <pre><code class='prose language-bash'>scp -P Port_number Source_File_Path Destination_Path</code></pre>
  <p>Example:</p>
  <pre><code class='prose language-bash'>scp -P 22 codebhaiya.zip root@106.32.48.32:/var/www</code></pre>
  <p>Copied Successfully</p>

  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Step 1: Get Access to Remote Server</h2>
  <p>To Access Remote Server via SSH.</p>
  <p>Syntax:</p>
  <pre><code class='prose language-bash'>ssh -p PORT USERNAME@HOSTIP</code></pre>
  <p>Example:</p>
  <pre><code class='prose language-bash'>ssh -p 22 root@106.32.48.32</code></pre>
  <p>Go to the Destination Path Where you copied the zip file</p>
  <p>Syntax:</p>
  <pre><code class='prose language-bash'>cd Destination_Path</code></pre>
  <p>Example:</p>
  <pre><code class='prose language-bash'>cd /var/www</code></pre>
  <p>Run this command to verify that the zip file is present</p>
  <pre><code class='prose language-bash'>ls</code></pre>
  <p>Unzip the Copied Zip File</p>
  <p>Syntax:</p>
  <pre><code class='prose language-bash'>unzip zip_file_name</code></pre>
  <p>Example:</p>
  <pre><code class='prose language-bash'>unzip codebhaiya.zip</code></pre>
 
  <h2 class='prose text-xl my-2 sm:text-2xl lg:text-3xl'>Conclusion</h2>
  <p>
    Now you have successfully transferred your file from windows to Remote Server.
  </p>
 
  <p>
    However, with the methods and step-by-step instructions outlined in this guide, you can confidently and securely copy files between these platforms. From zipping your project folder on your local Windows machine to unzipping it on the remote server, we've covered the essential steps to ensure your files are transferred smoothly. By following these straightforward procedures, you can streamline your workflow and focus on what matters most—your projects. Happy transferring!
  </p>",
    "readingTime":"2 Minutes"
  }
]